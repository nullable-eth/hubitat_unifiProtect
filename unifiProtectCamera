/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

1.3.7 - tomw - Support G4 Doorbell Pro
1.3.6 - tomw - Improved event handling
1.3.4 - tomw - Added light support and "isDark" attribute on cameras and lights
1.3.2 - tomw - Added command for setting recording mode.  Supported values are always/motion/never.
1.2.1 - tomw - Added configurable snapshot size.  Default size is 640 x 360.
1.1.0 - tomw - Added Smart Detect support (for supported cameras only, must be configured in UniFi Protect controller)
1.0.0 - tomw - Initial release

*/

metadata
{
    definition(name: "UniFi Protect Camera", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "ImageCapture"
        capability "MotionSensor"
        
        command "clearImages"
        command "setRecordingMode", ["mode"]
        
        command "takePicture", [[name: "Camera lens to use", type:"ENUM", constraints: knownLensUrls().keySet()]]
        
        attribute "displayImage", "string"
        attribute "isDark", "enum", ["true", "false"]
        attribute "smartDetectType", "string"
    }
}

preferences
{
    section
    {
        input name: "snapWidth", type: "number", title: "snapshot width", defaultValue: 640
        input name: "snapHeight", type: "number", title: "snapshot height", defaultValue: 360
    }
}

def installed()
{
    sendEvent(name: "motion", value: "inactive")
    sendEvent(name: "smartDetectType", value: "n/a")
    
    device.updateSetting("snapWidth", 640)
    device.updateSetting("snapHeight", 360)
}

def processEvent(event)
{
    if(!event)
    {
        return
    }
    
    if(null != event.isDark)
    {
        sendEvent(name: "isDark", value: event.isDark)        
    }
    
    if(null != event.smartDetectTypes)
    {
        smartDetectEvent(event.smartDetectTypes)
    }
    
    if(null != event.isMotionDetected)
    {
        sendEvent(name: "motion", value: event.isMotionDetected ? "active" : "inactive")
        
        if(hasSmartDetect() && !event.isMotionDetected)
        {
            // fail safe -- if we don't have any motion, we definitely don't have smart motion
            smartDetectEvent(null)
        }        
    }
    
    if(null != event.isSmartDetected)
    {
        if(!event.isSmartDetected)
        {
            smartDetectEvent(null)
        }
    }
}

def smartDetectEvent(smartDetectTypes)
{
    if(null == smartDetectTypes)
    {
        // clear event state to default value
        sendEvent(name: "smartDetectType", value: "waiting")
        return
    }
    
    smartDetectTypes.each
    {
        sendEvent(name: "smartDetectType", value: it)
    }
}

def knownLensUrls()
{
    def urls = 
        [
            "main": "snapshot",
            "package": "package-snapshot"
        ]
    
    return urls
}

def checkCamInfo(ffPath)
{
    if(null != state.getAt(ffPath))
    {
        return state.getAt(ffPath)
    }
    
    def cam = getParent()?.getBootstrap()?.cameras.find() { it.id == getCameraId()}
    if(cam)
    {
        def val = cam.featureFlags?.getAt(ffPath)
        state.putAt(ffPath, val)
        return val
    }
}

def hasSmartDetect()
{
    checkCamInfo("hasSmartDetect")
}

def hasPackageCamera()
{
    checkCamInfo("hasPackageCamera")
}

def takePicture(lens = "main")
{
    try
    {
        if(!knownLensUrls().keySet().contains(lens))
        {
            throw new Exception("\"${lens}\" lens type not supported")
        }
        
        if("package" == lens && !hasPackageCamera())
        {
            throw new Exception("\"${lens}\" lens type not supported")
        }
        
        take(lens)
    }
    catch (Exception e)
    {
        log.warn e.message
        take()
    }
}

def take(lens = "main")
{
    try
    {
        def stream = getParent()?.httpExecWithAuthCheck("GET", parent?.genParamsMain(getCameraSnapSuffix(lens)), true)?.data
        
        if(stream)
        {
            def bSize = stream.available()
            byte[] imageArr = new byte[bSize]
            stream.read(imageArr, 0, bSize)
            def image = hubitat.helper.HexUtils.byteArrayToHexString(imageArr)
            
            sendEvent(name: "image", value: image)
            
            def encodedImage = imageArr.encodeBase64().toString()
            def displayImage = '<img src="data:image/jpeg;base64,' + encodedImage + '">'
            
            sendEvent(name: "displayImage", value: displayImage)
        }
    }
    catch (Exception e)
    {
        log.debug "take() failed: ${e.message}"
    }
}

def clearImages()
{
    sendEvent(name: "image", value: "n/a")
    sendEvent(name: "displayImage", value: "n/a")   
}

def setRecordingMode(mode)
{
    if(!(["always", "motion", "never", "detections"].contains(mode)))
    {
        log.debug "unsupported recording mode (${mode})"
        return
    }
    
    try
    {
        getParent()?.httpExecWithAuthCheck("PATCH", parent?.genParamsMain(getCameraBaseUrl(), new groovy.json.JsonOutput().toJson([recordingSettings: [mode: mode]])), true)
    }
    catch (Exception e)
    {
        log.debug "setRecordingMode() failed: ${e.message}"
    }
}

def getCameraId()
{
    return device.getDeviceNetworkId()?.split('-')?.getAt(0)
}

def getCameraBaseUrl()
{
    return "/proxy/protect/api/cameras/" + getCameraId()
}

def getCameraSnapSuffix(lens = "main")
{
    return getCameraBaseUrl() + "/${knownLensUrls()?.getAt(lens)}?force=true&w=${snapWidth ?: 640}&h=${snapHeight ?: 360}"
}
